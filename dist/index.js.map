{"version":3,"sources":["../src/load-routes.ts"],"sourcesContent":["import { RequestHandler, Router } from \"express\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\nimport { createRequire } from 'node:module';\n\nglobal.require = createRequire(import.meta.url);\n\nexport type MiddlewareType =\n  | RequestHandler[]\n  | {\n      before?: RequestHandler[]\n      after?: RequestHandler[]\n    }\n\nexport interface RouteMetadata {\n  middlewares?: MiddlewareType\n}\n\nexport interface AutoloadRoutesOptions {\n  root?: string\n}\n\nexport const DEFAULT_METADATA: RouteMetadata = {\n  middlewares: [],\n}\n\nexport const loadRoutes = async (\n  routesPath: string = \"build/src/routes\"\n): Promise<Router> => {\n  const absoluteRoutesPath = path.resolve(process.cwd(), routesPath);\n  return await walkFiles(absoluteRoutesPath);\n};\n\nasync function walkFiles(currentDirectory: string): Promise<Router> {\n  const router = Router();\n\n  const files = fs.readdirSync(currentDirectory);\n  const filesMeta = files.map((file) => {\n    const filePath = path.join(currentDirectory, file);\n    const stats = fs.statSync(filePath);\n    return { name: file, isDirectory: stats.isDirectory() };\n  });\n  const groupFiles: {\n    routers: string[];\n    methods: string[];\n    metadata: string[];\n  } = {\n    routers: [],\n    methods: [],\n    metadata: [],\n  };\n  filesMeta.forEach((file: { name: string; isDirectory: boolean }) => {\n    if (file.isDirectory) {\n      groupFiles.routers.push(file.name);\n    }\n    if (/metadata.(t|j)s/gi.test(file.name)) {\n      if (groupFiles.metadata.length >= 1)\n        throw new Error(\n          \"Must be just 1 metadata file per folder to avoid colissions into \" +\n            currentDirectory\n        );\n      groupFiles.metadata.push(file.name);\n    }\n    if (\n      /^(get|post|put|patch|delete|head|options)\\.(t|j)s$/gi.test(file.name)\n    ) {\n      groupFiles.methods.push(file.name);\n    }\n  });\n  console.log(groupFiles);\n\n  for (const routy of groupFiles.routers) {\n    const subRouter = await walkFiles(path.join(currentDirectory, routy))\n    \n    // Colocar el orden de middlewares y main handler\n    if(groupFiles.metadata.length > 0) {\n      try {\n        const metadata: RouteMetadata = (await import('file:///'+path.normalize(path.join(currentDirectory, groupFiles.metadata[0])))).metadata\n        const before: any[] = Array.isArray(metadata.middlewares) ? metadata.middlewares : metadata.middlewares?.before ?? []\n        const after: any[] = !Array.isArray(metadata.middlewares) ? metadata.middlewares?.after ?? [] : []\n        router.use(`/${routy}`, before, subRouter, after)\n      }catch(e) {\n        console.log(e)\n      }\n    } else {\n      router.use(`/${routy}`, subRouter)\n    }\n    \n    // Asigno el router principal de esta seccion\n    \n  }\n\n  return router;\n}\n"],"mappings":";;;;AAAA,SAAyB,cAAc;AACvC,OAAO,UAAU;AACjB,OAAO,QAAQ;AAEf,SAAS,qBAAqB;AAE9B,OAAO,UAAU,cAAc,YAAY,GAAG;AAqBvC,IAAM,aAAa,8BACxB,aAAqB,uBACD;AACpB,QAAM,qBAAqB,KAAK,QAAQ,QAAQ,IAAI,GAAG,UAAU;AACjE,SAAO,MAAM,UAAU,kBAAkB;AAC3C,GAL0B;AAO1B,eAAe,UAAU,kBAA2C;AAClE,QAAM,SAAS,OAAO;AAEtB,QAAM,QAAQ,GAAG,YAAY,gBAAgB;AAC7C,QAAM,YAAY,MAAM,IAAI,CAAC,SAAS;AACpC,UAAM,WAAW,KAAK,KAAK,kBAAkB,IAAI;AACjD,UAAM,QAAQ,GAAG,SAAS,QAAQ;AAClC,WAAO,EAAE,MAAM,MAAM,aAAa,MAAM,YAAY,EAAE;AAAA,EACxD,CAAC;AACD,QAAM,aAIF;AAAA,IACF,SAAS,CAAC;AAAA,IACV,SAAS,CAAC;AAAA,IACV,UAAU,CAAC;AAAA,EACb;AACA,YAAU,QAAQ,CAAC,SAAiD;AAClE,QAAI,KAAK,aAAa;AACpB,iBAAW,QAAQ,KAAK,KAAK,IAAI;AAAA,IACnC;AACA,QAAI,oBAAoB,KAAK,KAAK,IAAI,GAAG;AACvC,UAAI,WAAW,SAAS,UAAU;AAChC,cAAM,IAAI;AAAA,UACR,sEACE;AAAA,QACJ;AACF,iBAAW,SAAS,KAAK,KAAK,IAAI;AAAA,IACpC;AACA,QACE,uDAAuD,KAAK,KAAK,IAAI,GACrE;AACA,iBAAW,QAAQ,KAAK,KAAK,IAAI;AAAA,IACnC;AAAA,EACF,CAAC;AACD,UAAQ,IAAI,UAAU;AAEtB,aAAW,SAAS,WAAW,SAAS;AACtC,UAAM,YAAY,MAAM,UAAU,KAAK,KAAK,kBAAkB,KAAK,CAAC;AAGpE,QAAG,WAAW,SAAS,SAAS,GAAG;AACjC,UAAI;AACF,cAAM,YAA2B,MAAM,OAAO,aAAW,KAAK,UAAU,KAAK,KAAK,kBAAkB,WAAW,SAAS,CAAC,CAAC,CAAC,IAAI;AAC/H,cAAM,SAAgB,MAAM,QAAQ,SAAS,WAAW,IAAI,SAAS,cAAc,SAAS,aAAa,UAAU,CAAC;AACpH,cAAM,QAAe,CAAC,MAAM,QAAQ,SAAS,WAAW,IAAI,SAAS,aAAa,SAAS,CAAC,IAAI,CAAC;AACjG,eAAO,IAAI,IAAI,KAAK,IAAI,QAAQ,WAAW,KAAK;AAAA,MAClD,SAAO,GAAG;AACR,gBAAQ,IAAI,CAAC;AAAA,MACf;AAAA,IACF,OAAO;AACL,aAAO,IAAI,IAAI,KAAK,IAAI,SAAS;AAAA,IACnC;AAAA,EAIF;AAEA,SAAO;AACT;AA5De;","names":[]}