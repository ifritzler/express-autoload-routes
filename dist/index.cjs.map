{"version":3,"sources":["../index.ts","../src/load-routes.ts"],"sourcesContent":["import { loadRoutes, RouteMetadata, MiddlewareType } from './src/load-routes.js'\n\nexport {\n  loadRoutes,\n  RouteMetadata,\n  MiddlewareType\n}","import {\n  NextFunction,\n  Request,\n  RequestHandler,\n  Response,\n  Router,\n} from \"express\";\nimport path, { sep } from \"path\";\nimport fs from \"fs\";\n\nexport type MiddlewareType =\n  | RequestHandler[]\n  | {\n      before?: RequestHandler[];\n      after?: RequestHandler[];\n    };\n\nexport interface RouteMetadata {\n  middlewares?: MiddlewareType;\n}\n\nexport interface AutoloadRoutesOptions {\n  root?: string;\n}\n\nexport const DEFAULT_METADATA: RouteMetadata = {\n  middlewares: [],\n};\n\nconst fileProtocol = \"file:///\";\n\nexport async function loadRoutes(routesPath: string): Promise<Router> {\n  try {\n    return await walkFiles(routesPath);\n  } catch (e: any) {\n    console.error(e.message);\n    return Router();\n  }\n}\n\nasync function walkFiles(\n  currentDirectory: string,\n  depth: number = 0\n): Promise<Router> {\n  const router = Router();\n\n  const files = fs.readdirSync(currentDirectory);\n  const filesMeta = files.map((file) => {\n    const filePath = path.join(currentDirectory, file);\n    const stats = fs.statSync(filePath);\n    return { name: file, isDirectory: stats.isDirectory() };\n  });\n  const groupFiles: {\n    routers: string[];\n    methods: string[];\n    metadata: string[];\n  } = {\n    routers: [],\n    methods: [],\n    metadata: [],\n  };\n  // Grouping files into an object with methods routes and metadata\n  filesMeta.forEach((file: { name: string; isDirectory: boolean }) => {\n    if (file.isDirectory) {\n      groupFiles.routers.push(file.name);\n    }\n    if (/metadata.(t|j)s/gi.test(file.name)) {\n      if (groupFiles.metadata.length >= 1)\n        throw new Error(\n          \"Must be just 1 metadata file per folder to avoid colissions into \" +\n            currentDirectory\n        );\n      groupFiles.metadata.push(file.name);\n    }\n\n    if (\n      /^(get|post|put|patch|delete|head|options)\\.(t|j)s$/gi.test(file.name)\n    ) {\n      groupFiles.methods.push(file.name);\n    }\n  });\n  const parentRouteSections = currentDirectory.split(sep);\n  const parentRoute = parentRouteSections[\n    parentRouteSections.length - 1\n  ].replace(/\\[([^\\]]+)\\]/gi, \":$1\");\n\n  let metadata: RouteMetadata | null = null;\n  if (groupFiles.metadata.length > 0) {\n    try {\n      metadata = (\n        await import(\n          fileProtocol +\n            path.normalize(path.join(currentDirectory, groupFiles.metadata[0]))\n        )\n      ).metadata;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  for (const routy of groupFiles.routers) {\n    const subRouter = await walkFiles(\n      path.join(currentDirectory, routy),\n      depth + 1\n    );\n    const before: RequestHandler[] = Array.isArray(metadata?.middlewares)\n      ? metadata?.middlewares\n      : metadata?.middlewares?.before ?? [];\n\n    const after: RequestHandler[] = !Array.isArray(metadata?.middlewares)\n      ? metadata?.middlewares?.after ?? []\n      : [];\n\n    router.use(\n      `${depth === 0 ? \"/\" : \"/\" + parentRoute}`,\n      before,\n      subRouter,\n      after\n    );\n  }\n\n  for (const fileMethod of groupFiles.methods) {\n    const section = currentDirectory\n      .split(sep)\n      .slice(-1)\n      .join(\"\")\n      .replace(/\\[([^\\]]+)\\]/gi, \":$1\");\n    const module: { metadata?: RouteMetadata; default: RequestHandler } =\n      await import(\n        fileProtocol + path.normalize(path.join(currentDirectory, fileMethod))\n      );\n    const method = getMethodName(fileMethod);\n    const before: RequestHandler[] = Array.isArray(module.metadata?.middlewares)\n      ? module.metadata?.middlewares\n      : module.metadata?.middlewares?.before ?? [];\n    const after: RequestHandler[] = !Array.isArray(module.metadata?.middlewares)\n      ? module.metadata?.middlewares?.after ?? []\n      : [];\n    const handler = async (req: Request, res: Response, next: NextFunction) => {\n      await module.default(req, res, next)\n      next();\n    };\n\n    if (groupFiles.metadata.length > 0) {\n      let metadata: RouteMetadata | null = null;\n      try {\n        metadata = (\n          await import(\n            fileProtocol +\n              path.normalize(\n                path.join(currentDirectory, groupFiles.metadata[0])\n              )\n          )\n        ).metadata;\n        const insertBefore: RequestHandler[] = Array.isArray(\n          metadata?.middlewares\n        )\n          ? metadata?.middlewares\n          : metadata?.middlewares?.before ?? [];\n        const insertAfter: RequestHandler[] = !Array.isArray(\n          metadata?.middlewares\n        )\n          ? metadata?.middlewares?.after ?? []\n          : [];\n        before.unshift(...insertBefore);\n        after.push(...insertAfter);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    // @ts-expect-error any\n    router[method ?? \"get\"](\n      `/${section.replace(/\\[([^\\]]+)\\]/gi, \":$1\")}`,\n      before,\n      handler,\n      after\n    );\n  }\n\n  return router;\n}\n\nfunction getMethodName(routePath: string): string | null {\n  const methodMatch = routePath.match(\n    /^(get|post|put|patch|delete|head|options)\\.(t|j)s$/i\n  );\n  if (methodMatch !== null) {\n    return methodMatch[1].toLowerCase();\n  }\n  return null;\n}\n"],"mappings":"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","names":["fs","path","module","metadata"]}